
https://velog.io/@jhlee508/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-SQL-%EA%B3%A0%EB%93%9D%EC%A0%90-Kit-JOIN

#프로그래머스 문제풀이 

# 오랜 기간 보호한 동물(1) (JOIN)

SELECT INS.NAME, INS.DATETIME
FROM ANIMAL_INS AS INS LEFT JOIN ANIMAL_OUTS AS OUTS
ON INS.ANIMAL_ID = OUTS.ANIMAL_ID
WHERE OUTS.DATETIME IS NULL
ORDER BY DATETIME ASC LIMIT 3;


# 없어진 기록 찾기 (JOIN)

SELECT OUTS.ANIMAL_ID, OUTS.NAME
FROM ANIMAL_OUTS AS OUTS LEFT OUTER JOIN ANIMAL_INS AS INS
ON OUTS.ANIMAL_ID = INS.ANIMAL_ID
WHERE INS.ANIMAL_ID IS NULL
ORDER BY OUTS.ANIMAL_ID, OUTS.NAME;


# 있었는데요 없었습니다 (JOIN)

SELECT OUTS.ANIMAL_ID, OUTS.NAME  
FROM ANIMAL_INS AS INS LEFT OUTER JOIN ANIMAL_OUTS AS OUTS 
ON OUTS.ANIMAL_ID = INS.ANIMAL_ID 
WHERE  OUTS.DATETIME < INS.DATETIME  
ORDER BY INS.DATETIME; 


# 조건에 부합하는 중고거래 상태 조회하기(String, Date)
SELECT BOARD_ID, WRITER_ID, TITLE, PRICE, 

CASE
WHEN (STATUS = 'SALE') THEN '판매중' 
WHEN (STATUS = 'RESERVED') THEN '예약중' 
ELSE '거래완료'
END AS STATUS
departments
FROM USED_GOODS_BOARD
WHERE CREATED_DATE = '2022-10-05'
ORDER BY BOARD_ID DESC;


# 인기있는 아이스크림 (SELECT)
SELECT FLAVOR 
FROM FIRST_HALF 
ORDER BY 
TOTAL_ORDER DESC, 
SHIPMENT_ID ASC;

# 흉부외과 또는 일반외과 의사 목록 출력하기(SELECT)

SELECT DR_NAME, DR_ID, MCDP_CD, DATE_FORMAT(HIRE_YMD,'%Y-%m-%d')
FROM DOCTOR 
WHERE 
MCDP_CD = 'CS' OR MCDP_CD = 'GS'
ORDER BY 
HIRE_YMD DESC,
DR_NAME ASC;

# 가장 비싼 상품 구하기(SUM, MAX, MIN)
SELECT MAX(PRICE)
FROM PRODUCT;

#상품 별 오프라인 매출 구하기(JOIN)
SELECT PRODUCT.PRODUCT_CODE, SUM(PRODUCT.PRICE*OFFLINE_SALE.SALES_AMOUNT) AS SALES 

FROM PRODUCT LEFT OUTER JOIN OFFLINE_SALE 
ON PRODUCT.PRODUCT_ID = OFFLINE_SALE.PRODUCT_ID 
GROUP BY PRODUCT_CODE
ORDER BY SALES DESC,
PRODUCT_CODE ASC;

# 가격이 제일 비싼 식품의 정보 출력하기(SUM, MAX, MIN)
SELECT PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE
FROM FOOD_PRODUCT
ORDER BY PRICE DESC
LIMIT 1;

# 강원도에 위치한 생산공장 목록 출력하기(SELECT)
SELECT FACTORY_ID, FACTORY_NAME, ADDRESS 
FROM FOOD_FACTORY
WHERE ADDRESS LIKE '강원도%'

# 최댓값 구하기(SUM, MAX, MIN)
SELECT MAX(DATETIME) AS '시간'
FROM ANIMAL_INS;

# 중복 제거하기 (SUM, MAX, MIN)
SELECT COUNT(DISTINCT NAME)
FROM ANIMAL_INS
WHERE NAME IS NOT NULL;

# 최솟값 구하기(SUM, MAX, MIN)
SELECT MIN(DATETIME)
FROM ANIMAL_INS;

# 모든 레코드 조회하기(SELECT)
SELECT *
FROM ANIMAL_INS  
ORDER BY ANIMAL_ID;

#이름이 없는 동물의 아이디(IS NULL)
SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NULL
ORDER BY ANIMAL_ID;

#이름이 있는 동물의 아이디(IS NULL)
SELECT ANIMAL_ID 
FROM ANIMAL_INS 
WHERE NAME IS NOT NULL 
ORDER BY ANIMAL_ID ASC;

# 동물 수 구하기(SUM, MAX, MIN)
SELECT COUNT(ANIMAL_ID)
FROM ANIMAL_INS;

# 나이 정보가 없는 회원 수 구하기(IS NULL)

SELECT COUNT(AGE IS NULL) AS 'USERS'
FROM USER_INFO
WHERE AGE IS NULL;

# NULL 처리하기(IS NULL)
-- CASE WHEN 풀이 
SELECT ANIMAL_TYPE,
CASE
WHEN (NAME IS NULL) THEN "No name"
ELSE NAME 
END AS NAME 
,SEX_UPON_INTAKE

FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

-- IFNULL 풀이 
SELECT ANIMAL_TYPE, IFNULL(NAME, "No name") AS NAME , SEX_UPON_INTAKE 
FROM ANIMAL_INS 
ORDER BY ANIMAL_ID; 


# 경기도에 위치한 식품창고 목록 출력하기 (IS NULL)
SELECT WAREHOUSE_ID, WAREHOUSE_NAME, ADDRESS, IFNULL(FREEZER_YN, "N")
FROM FOOD_WAREHOUSE
WHERE ADDRESS LIKE'경기도%'
ORDER BY WAREHOUSE_ID ASC;

-- ---------------------------------------------------------------------오후 
# 상위 N개 레코드 (SELECT)
SELECT NAME
FROM ANIMAL_INS 
ORDER BY DATETIME ASC LIMIT 1; 

# 12세 이하인 여자 환자 목록 출력하기 (SELECT)
SELECT PT_NAME, PT_NO, GEND_CD, AGE, IFNULL(TLNO, 'NONE') AS TLNO
FROM PATIENT
WHERE AGE <= 12 AND GEND_CD = 'W'
ORDER BY AGE DESC, PT_NAME ASC;

# 아픈 동물 찾기 (SELECT)
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS 
WHERE INTAKE_CONDITION = "Sick"
ORDER BY ANIMAL_ID ASC; 

#평균 일일 대여 요금 구하기 (SELECT)
-- ROUND(숫자,반올림할 자릿수) - 숫자를 반올림할 자릿수 +1 자릿수에서 반올림
SELECT ROUND(AVG(DAILY_FEE), 0) AS AVERAGE_FEE 
FROM CAR_RENTAL_COMPANY_CAR 
WHERE CAR_TYPE = 'SUV';

# 과일로 만든 아이스크림 고르기  (SELECT)
SELECT FIRST_HALF.FLAVOR
FROM FIRST_HALF LEFT OUTER JOIN ICECREAM_INFO
ON FIRST_HALF.FLAVOR = ICECREAM_INFO.FLAVOR
WHERE FIRST_HALF.TOTAL_ORDER >= 3000 AND ICECREAM_INFO.INGREDIENT_TYPE = 'fruit_based'
ORDER BY FIRST_HALF.TOTAL_ORDER DESC;

# 역순 정렬하기 (SELECT)
SELECT NAME, DATETIME
FROM ANIMAL_INS
ORDER BY ANIMAL_ID DESC;

#어린 동물 찾기 (SELECT)
SELECT ANIMAL_ID, NAME 
FROM ANIMAL_INS 
WHERE INTAKE_CONDITION <> 'Aged'
ORDER BY ANIMAL_ID;

# 동물의 아이디와 이름 (SELECT)
SELECT ANIMAL_ID, NAME 
FROM ANIMAL_INS 
ORDER BY ANIMAL_ID;

# 여러 기준으로 정렬하기 (SELECT)
SELECT ANIMAL_ID, NAME, DATETIME
FROM ANIMAL_INS
ORDER BY NAME ASC, DATETIME DESC; 

# 조건에 맞는 회원수 구하기 (SELECT)
SELECT COUNT(USER_ID) AS USERS
FROM USER_INFO
WHERE JOINED LIKE '2021%'
AND AGE BETWEEN 20 AND 29; 

#조건에 맞는 도서 리스트 출력하기 (SELECT)
SELECT BOOK_ID, DATE_FORMAT(PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK
WHERE YEAR(PUBLISHED_DATE) = '2021' AND CATEGORY = '인문'
ORDER BY PUBLISHED_DATE ASC; 

# 진료과별 총 예약 횟수 출력하기 (GROUP BY)
SELECT MCDP_CD AS '진료과 코드', COUNT(PT_NO) AS '5월 예약 건수'
FROM APPOINTMENT 
WHERE APNT_YMD BETWEEN '2022-05-01 00:00:00' AND '2022-05-31 23:59:59'
GROUP BY MCDP_CD
ORDER BY COUNT(PT_NO) ASC, MCDP_CD ASC;

# 가격대 별 상품 개수 구하기(GROUP BY) 

SELECT (PRICE-PRICE%10000) AS PRICE_GROUP, COUNT(PRODUCT_ID) AS PRODUCTS
FROM PRODUCT
GROUP BY PRICE_GROUP
ORDER BY PRICE ASC;

#3월에 태어난 여성 회원 목록 출력하기 (SELECT)

SELECT MEMBER_ID, MEMBER_NAME, GENDER, DATE_FORMAT(DATE_OF_BIRTH,'%Y-%m-%d') 
FROM MEMBER_PROFILE
WHERE DATE_FORMAT(DATE_OF_BIRTH, '%m') = '03' AND GENDER = 'W' AND TLNO IS NOT NULL 
ORDER BY MEMBER_ID;

 








